#!/bin/bash
usage()
{
cat << EOF
usage: $0 [-h] [-c CONFIG] [-d]

Checks where we have shared memory servers for psana running
and could run psana jobs.

OPTIONS:
-h Show usage
-c Pick a specific DAQ config file rather than automatically selecting
current hutch's file
-d Also show information about dss node mapping for psana
-a also show nodes for ami1/ami2
-e show detailed information for psana and ami1/ami2
EOF
}

if [[ ($1 == "--help") || ($1 == "-h") ]]; then
	usage
	exit 0
fi

HUTCH=`get_info --gethutch`
for i in "xpp" "xcs" "mfx" "cxi" "mec" "det"; do
   if [ $HUTCH == $i ]; then
      FOUNDHUTCH=1
      break
   fi
done
if [ -z $FOUNDHUTCH ]; then
   echo 'could not determine hutch or hutch not implemented, quit'
   exit
fi
NOTRUNNING='Not running'

while getopts "c:dae" OPTION
do
    case "$OPTION" in
	c)
	    CONFIG="$OPTARG"
	    ;;
	d)
	    DETAIL="1"
	    ;;
	a)
	    AMI="1"
	    ;;
	e)
	    DETAIL="1"
            AMI="1"
	    ;;
	?)
	    usage
	    exit
	    ;;
	esac
done
shift "$(($OPTIND-1))"

# If specified a config file, then use that
if [[ -z $CONFIG ]]; then

    CNFEXT=.cnf

    if [[ $HUTCH == 'cxi' ]]; then
        if [[ $HOSTNAME == 'cxi-daq' ]]; then
           CNFEXT=_0.cnf
        elif [[ $HOSTNAME == 'cxi-monitor' ]]; then
           CNFEXT=_1.cnf
        elif [[ -z $CONFIG ]]; then
            echo 'You must provide cxi config file (-c) if not on daq machine'
            exit 1
        fi 
    fi

    CONFIG=$HUTCH$CNFEXT
fi

#create a tempoprary file with the procStatus so we only call that once;
/reg/g/pcds/dist/pds/$HUTCH/current/tools/procmgr/procmgr status /reg/g/pcds/dist/pds/$HUTCH/scripts/$CONFIG > /tmp/procServStatus.$$

PSANA_NODES=(`grep monreqsrvpsana /tmp/procServStatus.$$ | awk {'print $1'}`)
AMI2_NODES=(`grep monreqsrvami2_ /tmp/procServStatus.$$ | awk {'print $1'}`)
AMI1_NODES=(`grep monreqsrvami1_ /tmp/procServStatus.$$ | awk {'print $1'}`)

if [[ -z $DETAIL ]]; then
    NODESTR=''
    for ((idx=0; idx<${#PSANA_NODES[@]}; ++idx)); do 
        NODESTR=$NODESTR${PSANA_NODES[idx]}','; 
    done
    echo ${NODESTR::-1}
else
    EVENT=(`grep event /tmp/procServStatus.$$ | awk {'print $1'}`)
    PSANA_MASKS=(`grep monreqsrvpsana /tmp/procServStatus.$$ | awk -F "-i " {'print $2'} | awk {'print $1'}`)
    EVENT_MASKS=(`grep event /tmp/procServStatus.$$ | awk -F "-s " '{print $2;}' | awk '{print lshift(1,$1);}'`)
    echo 'psana runs on the following nodes looking at event nodes '${#EVENT[@]}
    NODESTR=''
    for ((idx=0; idx<${#PSANA_NODES[@]}; ++idx)); do 
        echo -n ${PSANA_NODES[idx]}':'
	MASKS=${PSANA_MASKS[idx]}
	for ((m=0; m<${#EVENT[@]}; ++m)); do 
	    if [ $((${MASKS}&${EVENT_MASKS[m]})) != 0 ]; then
	        echo -n ' '${EVENT[m]} 
		MASKS=$((${MASKS}&~${EVENT_MASKS[m]}))
	    fi
        done
	if [ ${MASKS} != '0' ]; then
	    echo " MISSING MON MASK: "$MASKS
	fi
	echo ""
    done

fi

if [[ $AMI ]]; then
    if [[ -z $DETAIL ]]; then
        NODESTR='ami1: '
        for ((idx=0; idx<${#AMI1_NODES[@]}; ++idx)); do
            NODESTR=$NODESTR${AMI1_NODES[idx]}',';
        done
        echo ${NODESTR::-1}
        echo
        NODESTR='ami2: '
        for ((idx=0; idx<${#AMI2_NODES[@]}; ++idx)); do
            NODESTR=$NODESTR${AMI2_NODES[idx]}',';
        done
        echo ${NODESTR::-1}
    else
        AMI1_MASKS=(`grep monreqsrvami1_ /tmp/procServStatus.$$ | awk -F "-i " {'print $2'} | awk {'print $1'}`)
        echo 'ami1 runs on the following nodes looking at event nodes out of '${#EVENT[@]}
        NODESTR=''
        for ((idx=0; idx<${#AMI1_NODES[@]}; ++idx)); do
            echo -n ${AMI1_NODES[idx]}':'
            MASKS=${AMI1_MASKS[idx]}
	    for ((m=0; m<${#EVENT[@]}; ++m)); do
	        if [ $((${MASKS}&${EVENT_MASKS[m]})) != 0 ]; then
	            echo -n ' '${EVENT[m]}
		    MASKS=$((${MASKS}&~${EVENT_MASKS[m]}))
	        fi
            done
	    if [ ${MASKS} != '0' ]; then
	        echo " MISSING MON MASK: "$MASKS
	    fi
	    echo ""
        done

        AMI2_MASKS=(`grep monreqsrvami2_ /tmp/procServStatus.$$ | awk -F "-i " {'print $2'} | awk {'print $1'}`)
        echo 'ami2 runs on the following nodes looking at event nodes out of '${#EVENT[@]}
        NODESTR=''
        for ((idx=0; idx<${#AMI2_NODES[@]}; ++idx)); do
            echo -n ${AMI2_NODES[idx]}':'
            MASKS=${AMI2_MASKS[idx]}
	    for ((m=0; m<${#EVENT[@]}; ++m)); do
	        if [ $((${MASKS}&${EVENT_MASKS[m]})) != 0 ]; then
	            echo -n ' '${EVENT[m]}
		    MASKS=$((${MASKS}&~${EVENT_MASKS[m]}))
	        fi
            done
	    if [ ${MASKS} != '0' ]; then
	        echo " MISSING MON MASK: "$MASKS
	    fi
	    echo ""
        done
    fi
fi

rm  /tmp/procServStatus.$$
